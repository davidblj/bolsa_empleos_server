FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# BE API

BE is an API for the job vacancy app of the University of Antioquia Computer Science Engineering faculty

## Authentication

Some routes may require an authentication token. A token is generated by submitting an account credentials 
to the [session](https://bolsa.docs.apiary.io/#reference/session/get-token) route. That token must be then set within an Authorization header
to access a protected route.

The API only supports this kind of stateless authentication.

## Group Session

Resources related to the session management

## Access Token [/session]

### Get token [POST]

A token will have a life span of 15 days. This action does not only returns a token, but also the user and its id and role matching the sent the credentials that were sent. 
You may use this role for client authentication, but you must always send a token to access a private route. 

+ Request (application/json)

        { 
            "username": "Doe",
            "password": "secret"
        }

+ Response 200 (application/json)

        {
            "user": "Doe",
            "role": "student",
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1YTcxZGRhODI0OTJjYzIyNWNiNDViNTQiLCJuYW1lIjoiRG9lMDEiLCJyb2xlIjoic3R1ZGVudCIsImV4cCI6MTUxODAyODEzMSwiaWF0IjoxNTE3NDIzMzMxfQ.9eIH6GpBXTIh0hjn63AVxWkSRSfpRNIYghrTxYwwcaM"
        }

## Group Candidates
 
Resources related to a candidate

## Candidate [/candidate/jobs]

This route and its subroutes requires an authorization header. The provided token had to be generated by a user that's either an "student" or a "graduate"

### View applied jobs [GET]

+ Request testing (application/json)

    + Headers
    
            Authentication: Bearer token

+ Response 200 (application/json)

        [
            "_id": "5a63b241e83e4043966032",
            "_id": "5a63b241e83e4043966034"
        ]
        
### Add job [POST /candidate/jobs/{jobId}]

+ Parameters
    + jobId (string, required) - MongoDB Id, the unique identifier from a job

+ Request (application/json)

    + Headers
    
            Authentication: Bearer token

+ Response 204

## Candidates [/candidates]
    
### Get user [GET /candidates/{userId}]

+ Parameters
    + userId (string, required) - MongoDB Id, the unique identifier from a user

+ Response 200 (application/json)

    + Attributes (Candidate base)
    
        + id: 007 (string, required) - Numeric value

### Create a User [POST]

You may create a new user using this action. It takes a json object relating to the basic information of a new account. Take a look at the
attribute list for more information.

+ Request (application/json)

    + Attributes (Candidate base)
    
        + password: secret (string, required) - Alphanumeric value

+ Response 201 (application/json)

    + Body 

            { 
                "Location": "candidates/5a63b241e83e404396608e"
            }

# Data Structures 

## Candidate base (object)
+ name: John (string, required) - Alphabetic value (3 to 15 characters)
+ username: Doe (string, required) - Alphanumeric value (3 to 15 characters)
+ age: 40 (string, required) - Numeric value (1 to 2 characters)
+ email: agent007@gmail.com (string, required) - Alphanumeric value (and a valid representation of an email)
+ cellphone: 3003102703 (string, required) - Numeric value (10 characters)
+ jobTitle: spy (string, required) - Alphanumeric value. This is a job preference 
+ location: Budapest (string, required) - Alphanumeric value. This is a location preference to work in
+ skills: "math", "english" (array[string], required) - Array of alphabetic values. This are the known programming languages